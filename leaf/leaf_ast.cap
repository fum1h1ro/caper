base = Node;

module-header = @{
#include "leaf_node.hpp"

namespace leaf {

}@

module-footer = @{
} // namespace leaf

}@

class-footer = @{
    void alpha( AlphaContext& );
    void encode( EncodeContext&, bool, Value& );
    void entype( EntypeContext&, bool, type_t );
    void display( int indent, std::ostream& );

}@

atom = bool, char, int, symbol_t, type_t, symmap_t;

type Module = TopElems(topelems);

type TopElems = TopElem*(v);
type TopElem = Require | TopLevelFunDecl | TopLevelFunDef | TopLevelStructDef;

type Require = Identifier(name), Module(module);
type TopLevelFunDecl = FunDecl(fundecl);
type TopLevelFunDef = FunDef(fundef);
type TopLevelStructDef = StructDef(structdef);

type Block = Statements(statements), bool(expanded);

type Statements = Statement*(v);
type Statement = FunDecl | FunDef | StructDef |
                 VarDecl | IfThenElse | MultiExpr |
                 SectionLabel | ThrowStatement | Invoke;

type FunDecl = FunSig(sig);
type FunDef = FunSig(sig), Block(body), symmap_t(freevars);
type StructDef = Identifier(name), Members(members);

type Members = Member*(v);
type Member = FormalArg(farg);

type FunSig = Identifier(name), FormalArgs(fargs), TypeExpr(result_type);
type FormalArgs = FormalArg*(v);
type FormalArg = Identifier(name), TypeExpr(t);

type VarDecl = VarDeclElems(varelems), MultiExpr(data);
type VarDeclElem = VarDeclElems | VarDeclIdentifier;
type VarDeclElems = VarDeclElem*(v);
type VarDeclIdentifier = Identifier(name), TypeExpr(t);

type IfThenElse = Expr(cond), Block(iftrue), Block(iffalse);

type MultiExpr = Expr*(v);

type Expr = LogicalOr;

type LogicalOr = LogicalOrElems | LogicalAnd;
type LogicalOrElems = LogicalAnd*(v);

type LogicalAnd = LogicalAndElems | Equality;
type LogicalAndElems = Equality*(v);

type Equality = Relational | EqualityEq | EqualityNe;

type Relational = Additive
                  | RelationalLt | RelationalGt
                  | RelationalLe | RelationalGe;

type EqualityEq = Equality(lhs), Relational(rhs);
type EqualityNe = Equality(lhs), Relational(rhs);

type RelationalLt = Relational(lhs), Additive(rhs);
type RelationalGt = Relational(lhs), Additive(rhs);
type RelationalLe = Relational(lhs), Additive(rhs);
type RelationalGe = Relational(lhs), Additive(rhs);

type Additive = Multiplicative | AddExpr | SubExpr;
type AddExpr = Additive(lhs), Multiplicative(rhs);
type SubExpr = Additive(lhs), Multiplicative(rhs);

type Multiplicative = CastExpr | MulExpr | DivExpr;
type MulExpr = Multiplicative(lhs), CastExpr(rhs);
type DivExpr = Multiplicative(lhs), CastExpr(rhs);

type CastExpr = Cast | MemberExpr;
type Cast = MemberExpr(expr), TypeExpr(t);

type MemberExpr = MemberRef | PrimExpr;
type MemberRef = PrimExpr(expr), Identifier(field);

type PrimExpr = LiteralBoolean | LiteralInteger | LiteralChar
                | VarRef | Parenthized | FunCall | Lambda
			  | LiteralStruct;
type LiteralBoolean = bool(data);
type LiteralInteger = int(data);
type LiteralChar = char(data);
type VarRef = Identifier(name);
type Parenthized = MultiExpr(exprs);
type FunCall = Identifier(func), ActualArgs(aargs);
type LiteralStruct = Identifier(name), LiteralMembers(members);
type Lambda = symbol_t(name),
              FormalArgs(fargs), TypeExpr(result_type), Block(body),
              symmap_t(freevars);

type ActualArgs = ActualArg*(v);
type ActualArg = Expr(expr);

type SectionLabel = CatchLabel | FinallyLabel;
type CatchLabel = FormalArg(farg);
type FinallyLabel = int(dummy);
type ThrowStatement = Expr(e);
type Invoke = Identifier(func);

type LiteralMembers = LiteralMember*(v);
type LiteralMember = Identifier(name), MultiExpr(data);

type TypeExpr = Types | TypeRef | NamedType;
type Types = TypeExpr*(v);
type TypeRef = type_t(t);
type NamedType = Identifier(name);

type Identifier = symbol_t(source), symbol_t(fresh);
